{"version":3,"sources":["components/CardItem/index.js","components/Nav/index.js","components/Wrapper/index.js","components/Header/index.js","components/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["CardItem","props","src","alt","name","clicked","onClick","cardClick","id","Nav","className","href","score","topScore","Wrapper","children","Header","Game","state","cards","handleCorrectClick","newCards","newScore","newTopScore","Math","max","setState","shuffleCard","handleIncorrectClick","resetCard","reset","map","handleCardClick","isClicked","item","newAnimal","i","length","j","floor","random","temp","this","key","image","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qiDAoBeA,MAjBf,SAAkBC,GACd,OACI,6BAEI,yBACAC,IAAKD,EAAMC,IACXC,IAAKF,EAAMG,KAEXC,QAASJ,EAAMI,QAEfC,QAAU,kBAAML,EAAMM,UAAUN,EAAMO,S,MCMnCC,MAhBf,SAAaR,GACX,OACE,yBAAKS,UAAU,UACb,4BACE,4BACE,uBAAGC,KAAK,KAAR,gBAGF,sCACUV,EAAMW,MADhB,iBACqCX,EAAMY,aCNpCC,MAJf,SAAiBb,GACb,OAAO,yBAAKS,UAAU,WAAWT,EAAMc,W,MCS5BC,MATf,WACI,OACI,4BAAQN,UAAU,UACd,4CACA,yG,6jBCgGGO,E,2MA3FbC,MAAQ,CACNC,QACAP,MAAO,EACPC,SAAU,G,EAMZO,mBAAqB,SAACC,GAAc,IAAD,EACL,EAAKH,MAAzBL,EADyB,EACzBA,SACFS,EAF2B,EACfV,MACO,EACnBW,EAAcC,KAAKC,IAAIH,EAAUT,GAEvC,EAAKa,SAAS,CACZP,MAAO,EAAKQ,YAAYN,GACxBT,MAAOU,EACPT,SAAUU,K,EAIdK,qBAAuB,SAAAT,GACrB,EAAKO,SAAS,CACZP,MAAO,EAAKU,UAAUV,GACtBP,MAAO,K,EAIXiB,UAAY,SAAAV,GACV,IAAMW,EAAQX,EAAMY,IAAI,SAAAZ,GAAK,YAAUA,EAAV,CAAiBd,SAAS,MACvD,OAAO,EAAKsB,YAAYG,I,EAI1BE,gBAAkB,SAAAxB,GAChB,IAAIyB,GAAY,EACVZ,EAAW,EAAKH,MAAMC,MAAMY,IAAI,SAAAG,GACpC,IAAMC,EAAS,KAAQD,GASvB,OAPGC,EAAU3B,KAAOA,IACb2B,EAAU9B,UAEb8B,EAAU9B,SAAU,EACpB4B,GAAY,IAGTE,IAGTF,EAAY,EAAKb,mBAAmBC,GAAY,EAAKO,qBAAqBP,I,EAM5EM,YAAc,SAAAR,GAEZ,IADA,IAAIiB,EAAIjB,EAAMkB,OAAS,EAChBD,EAAI,GAAG,CACZ,IAAME,EAAId,KAAKe,MAAMf,KAAKgB,UAAYJ,EAAI,IACpCK,EAAOtB,EAAMiB,GACnBjB,EAAMiB,GAAKjB,EAAMmB,GACjBnB,EAAMmB,GAAKG,EACXL,IAEF,OAAOjB,G,mFA1DPuB,KAAKhB,SAAS,CAAEP,MAAOuB,KAAKf,YAAYe,KAAKxB,MAAMC,W,+BA6D3C,IAAD,OACP,OACE,oCACE,kBAAC,EAAD,CAAKP,MAAO8B,KAAKxB,MAAMN,MAAOC,SAAU6B,KAAKxB,MAAML,WACnD,kBAAC,EAAD,MAEA,kBAAC,EAAD,KACG6B,KAAKxB,MAAMC,MAAMY,IAAI,SAAAZ,GAAK,OACzB,kBAAC,EAAD,CACEwB,IAAKxB,EAAMX,GACXA,GAAIW,EAAMX,GACVN,IAAKiB,EAAMyB,MACXxC,KAAMe,EAAMf,KACZG,UAAW,EAAKyB,0B,GAjFXa,aCAJC,MARf,WACE,OAEE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.59a6bc26.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction CardItem(props){\n    return (\n        <div>\n            {/* <div className=\"img-container\"> */}\n            <img \n            src={props.src}\n            alt={props.name}\n            \n            clicked={props.clicked} \n           \n            onClick={ () => props.cardClick(props.id)} />\n        \n        </div>\n\n    )\n}\n\nexport default CardItem;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Nav(props) {\n  return (\n    <nav className=\"navbar\">\n      <ul>\n        <li>\n          <a href=\"/\">Clicky Game</a>\n        </li>\n        {/* <NavMessage score={props.score} topScore={props.topScore} /> */}\n        <li>\n          Score: {props.score} | Top Score: {props.topScore}\n        </li>\n      </ul>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\n\nfunction Wrapper(props) {\n    return <div className=\"wrapper\">{props.children}</div>\n}\n\nexport default Wrapper;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Header() {\n    return(\n        <header className=\"header\">\n            <h1>Clicky Game!</h1>\n            <h2>Click on image to earn points, but don't click on image more than once!</h2>\n        </header>\n    )\n}\n\nexport default Header;","import React, { Component } from \"react\";\nimport cards from \"../../cards\";\nimport CardItem from \"../CardItem/index\";\nimport Nav from \"../Nav/index\";\nimport Wrapper from \"../Wrapper/index\";\nimport Header from \"../Header/index\";\n// import Footer from \"../Footer/index\";\nimport \"./style.css\";\n\n\n\nclass Game extends Component {\n  state = {\n    cards,\n    score: 0,\n    topScore: 0\n  };\n  componentDidMount(){\n    this.setState({ cards: this.shuffleCard(this.state.cards)})\n  }\n\n  handleCorrectClick = (newCards) => {\n    const { topScore, score } = this.state;\n    const newScore = score + 1;\n    const newTopScore = Math.max(newScore, topScore);\n\n    this.setState({\n      cards: this.shuffleCard(newCards),\n      score: newScore,\n      topScore: newTopScore\n    });\n  };\n\n  handleIncorrectClick = cards => {\n    this.setState({\n      cards: this.resetCard(cards),\n      score: 0\n    });\n  };\n  \n  resetCard = cards => {\n    const reset = cards.map(cards => ({ ...cards, clicked: false }));\n    return this.shuffleCard(reset);\n  }\n\n\n  handleCardClick = id => {\n    let isClicked = false;\n    const newCards = this.state.cards.map(item => {\n      const newAnimal = { ...item };\n     \n      if(newAnimal.id === id) {\n        if (!newAnimal.clicked) {\n          \n          newAnimal.clicked = true;\n          isClicked = true;\n        }\n      }\n      return newAnimal\n    });\n    \n    isClicked ? this.handleCorrectClick(newCards) : this.handleIncorrectClick(newCards);\n  };\n\n\n\n\n  shuffleCard = cards => {\n    let i = cards.length - 1;\n    while (i > 0) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = cards[i];\n      cards[i] = cards[j];\n      cards[j] = temp;\n      i--;\n    }\n    return cards;\n  };\n\n  render() {\n    return (\n      <>\n        <Nav score={this.state.score} topScore={this.state.topScore} />\n        <Header />\n\n        <Wrapper>\n          {this.state.cards.map(cards => (\n            <CardItem\n              key={cards.id}\n              id={cards.id}\n              src={cards.image}\n              name={cards.name}\n              cardClick={this.handleCardClick}\n\n            />\n          ))}\n        </Wrapper>\n        {/* <Footer /> */}\n      </>\n    );\n  }\n}\n\nexport default Game;\n","import React from 'react';\nimport Game from \"./components/Game/\";\n\nfunction App() {\n  return (\n\n    <Game />\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}